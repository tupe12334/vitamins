{"version":3,"sources":["logo.svg","components/NavBar.js","pages/main.js","components/AboutText.js","components/SignupForm.js","pages/about.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","React","useState","anchorEl","setAnchorEl","PageTitle","setPageTitle","selectedIndex","setSelectedIndex","pages","handleMenuItemClick","event","index","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","currentTarget","keepMounted","open","Boolean","onClose","map","MenuItem","key","selected","to","Typography","id","variant","aria-controls","aria-haspopup","MainPage","Component","AboutText","BlueRadio","withStyles","root","blue","checked","props","Radio","PinkRadio","pink","SignupForm","localStorage","getItem","UserName","setUserName","UserGender","setUserGender","FormControl","dir","TextField","label","value","onChange","target","RadioGroup","name","FormControlLabel","control","Button","setItem","App","className","exact","path","component","About","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fa42b66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n\r\nexport default function Navbar() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [PageTitle, setPageTitle] = React.useState(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n  const pages = [\"Main\", \"About\",\"User\"];\r\n  const handleClickListItem = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setPageTitle(pages[index]);\r\n    setAnchorEl(null);\r\n\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon onClick={handleClickListItem} />\r\n          <Menu\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleClose}\r\n          >\r\n            {pages.map((pages, index) => (\r\n              <MenuItem\r\n                key={pages}\r\n                selected={index === selectedIndex}\r\n                onClick={(event) => handleMenuItemClick(event, index)}\r\n              >\r\n                <Link to={pages === \"Main\" ? \"/\" : `/${pages}`}>{pages}</Link>\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        </IconButton>\r\n        <Typography id=\"PageTitle\" variant=\"h6\">\r\n          {PageTitle}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"menu-appbar\"\r\n          aria-haspopup=\"true\"\r\n          //onClick={handleMenu}\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default class MainPage extends React.Component{\r\n    constructor(){\r\nsuper();\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                main page\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default function AboutText (){\r\n    return(\r\n        <div>\r\n            <p>\r\n                test text in about page\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Button, Radio, RadioGroup, FormControl, FormControlLabel, TextField } from '@material-ui/core';\r\nimport { blue, green, orange, pink, red } from '@material-ui/core/colors';\r\n\r\nimport 'fontsource-roboto';\r\n\r\nconst BlueRadio = withStyles({\r\n    root: {\r\n        color: blue[400],\r\n        '&$checked': {\r\n            color: blue[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />);\r\nconst PinkRadio = withStyles({\r\n    root: {\r\n        color: pink[400],\r\n        '&$checked': {\r\n            color: pink[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />);\r\n\r\n\r\nexport default function SignupForm() {\r\n    const [UserName, setUserName] = React.useState(localStorage.getItem('UserName') || null)\r\n    const [UserGender, setUserGender] = React.useState(localStorage.getItem('UserGender'))\r\n    const saveUserData = () => {\r\n        localStorage.setItem('UserName', UserName);\r\n        localStorage.setItem('UserGender', UserGender);\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setUserGender(event.target.value);\r\n\r\n    };\r\n    const onChange = event => setUserName(event.target.value);\r\n    return <FormControl dir=\"rtl\">\r\n        <Typography variant=\"h3\">טופס שמירת נתונים אישיים</Typography>\r\n        <br />\r\n        <br />\r\n        <TextField label=\"שם מלא\" value={UserName} onChange={onChange} />\r\n        <br />\r\n        <RadioGroup aria-label=\"gender\" name=\"gender1\" value={UserGender} onChange={handleChange}>\r\n            <FormControlLabel value=\"זכר\" control={<BlueRadio />} label=\"זכר\" />\r\n            <FormControlLabel value=\"נקבה\" control={<PinkRadio />} label=\"נקבה\" />\r\n        </RadioGroup>\r\n        <br />\r\n        <Button variant=\"contained\" onClick={saveUserData}>שמור נתונים</Button>\r\n    </FormControl>\r\n}\r\n","import React from 'react';\r\nimport AboutText from '../components/AboutText'\r\nimport SignupForm from '../components/SignupForm'\r\nexport default class MainPage extends React.Component{\r\n    constructor(){\r\nsuper();\r\n    }\r\n    render(){\r\n        return(\r\n            <div dir=\"rtl\">\r\n                <AboutText/>\r\n                <SignupForm/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./components/NavBar\";\r\nimport Navbar from \"./components/NavBar\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport MainPage from \"./pages/main\";\r\nimport About from './pages/about'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router className=\"App\">\r\n      <Navbar />\r\n      <Route exact path=\"/\" component={MainPage} />\r\n      <Route path=\"/about\" component={About} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div dir=\"rtl\">\r\n    <App />\r\n\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}